#pragma once

namespace Client
{
	const unsigned int	g_iWinCX = 1280;
	const unsigned int	g_iWinCY = 720;
	enum MONSTER { MSW_T1, MSW_T2, MSW_T3, MSP_T1, MSP_T2, MSP_T3, SQUISHY, RG_T1, RG_T2, RG_T3, TR_AOE, TR_BEAM, TR_BLAST, TR_BULLET, TR_ARMS, HVM_T1, HVM_T2, HVM_T3, MONSTER_END	};
	enum LEVEL { LEVEL_STATIC, LEVEL_LOADING, LEVEL_LOGO, LEVEL_REALITY, LEVEL_BAR, LEVEL_PARK, LEVEL_COFFEE, LEVEL_GAMEPLAY, LEVEL_BOSS_FEAR, LEVEL_CITY, LEVEL_BOSS_REGRET, LEVEL_LAVA, LEVEL_BOSS_RESENTMENT, LEVEL_ENDING, LEVEL_END };
	enum COLORITEM { CI_RESOLVE, CI_GLASS, CI_INSPIRATION, CI_END };

	/*For Equipment*/
	enum EQUIP_INDEX { E_BASEBALLBAT, E_BOXINGGLOVE, E_BUCKLER, E_DEFLECTOR, E_LONGBOW, E_KUNAI, E_FIREPILLAR, E_PRIMALSSCREAM, E_TERRA, E_STRONGUNARMED, E_FRONTFLIP, E_ROLL, E_DUALSWORDS, E_CRIMSONSHIELD, E_TRIPOINT, E_DREAMRUSH, E_STATICFIELD, E_SPACERING, E_WATERSPIRE, E_MAGICSHAPE, E_DAGGER, E_ASTRALHOP, E_END };
	enum EQUIP_KIND {EK_WEAPON, EK_SHIELD, EK_RANGED, EK_SHOES, EK_SKILL, EK_TOKEN, EK_END};
	enum EQUIP_HAND { EH_LEFT, EH_RIGHT, EH_ALL, EH_END };
	enum EQUIP_MESH { EM_BASEBALLBAT, EM_BOXINGGLOVE_L, EM_BOXINGGLOVE_R, EM_BUCKLER, EM_DEFLECTOR, EM_LONGBOW, EM_DUALSWORDS, EM_DUALSWORDS_TWO, EM_CRIMSONSHIELD, EM_TRIPOINT, EM_DAGGER, EM_END };
	enum EQUIP_TOKEN { ET_BIRTHDAYCARD, ET_TOYTANK, ET_OXYGENTANK, ET_HEARTCONTAINER, ET_DELICATEVASE, ET_MOTIVATIONALPOSTER, ET_CHAOSTHEORY, ET_BASEBALLGLOVE, ET_LOCKPICK, ET_ANTIDEPRESSANT, ET_BOXINGRING,
		ET_WIZARDROBE, ET_POCKETKNIFE, ET_OOBLECK, ET_TREASUREMAP, ET_BLACKBELT, ET_BARBELL, ET_TOYPIGEON, ET_BULLETPROOFGLASS, ET_DOUBLEJEOPORDY, ET_FESTIVEGIFT, ET_TRAININGWHEELS, ET_SPONGE, ET_WHITEELEPHANT, ET_INFLATABLECOSTUME, ET_KEEPSAKE, ET_END
	};
	typedef struct tagEquipmentInfo
	{
		EQUIP_INDEX eIndex;
		EQUIP_KIND eKind;
		EQUIP_HAND eHand;
		EQUIP_MESH eLeftMesh;
		EQUIP_MESH eRightMesh;
	}EQUIPINFO;

	enum MAP_OBJ {
		MO_BOMB, MO_BOSS, MO_START, MO_CHALLENGE, MO_CHEST, MO_DESTRUCTIBLE, MO_DESTRUCTIBLE_BOMB,
		MO_ENCHANT, MO_EXCHANGE, MO_GLASS, MO_HEALTH, MO_INSPIRATION, MO_KEY, MO_STORE, MO_PUZZLE,
		MO_RESOLVE, MO_RESTORE_HEALTH, MO_RESTORE_LUCID, MO_SAND, MO_SPARK, MO_NONE, MO_END
	};

	enum MAP_KIND { MK_CURRENT, MK_VISIBLE, MK_ON, MK_INVISIBLE, MK_END };

	enum CUTSCENE { SCENE_FEARINTRO, SCENE_REGRETINTRO, SCENE_RESENTINTRO, SCENE_END };

	typedef struct tagMapInfo
	{
		MAP_OBJ		Object[3];			// 해당 스테이지 안에 잔존하는 오브젝트
		MAP_KIND	Kind;
		int			Index;				// 어디에 있는 스테이지인지
	}MAPINFO;
}

#include <process.h>
#include <random>

extern HINSTANCE g_hInst;
extern HWND g_hWnd;
extern float g_TrailMask;

using namespace Client;
